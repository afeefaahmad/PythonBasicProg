Q1. Python expression statement (break, continue, pass)

ðŸ§©A1.
numbers = [1,3,5,2,5,6,0,7,1,3,8]
for n in numbers:
    pass
    if(n == 0):
        break
    elif(n%2==0):
        continue
    print(n)


Q2. Decorators in python
    A decorator in Python is a function that takes another function as input, extends or modifies its behavior, and returns the enhanced function. 
    It allows you to add functionality to an existing function or class without modifying its structure.
    
ðŸ§©A2.
Build-in decorators : @property (Converts a method into an attribute i.e. method can be called without round braces )    
                      @staticmethod (Defines a static method i.e. it don't require an object/instance to be called)
                      @classmethod (Takes class itself as first argument instead of instance)

class Math:
    @staticmethod
    def add(a, b):
        return a + b

    @classmethod
    def description(cls):
        return f"This is a {cls.__name__} class."

    @property
    def pi(self):
        return 3.14159

print(Math.add(3, 5))  # Output: 8

# Call class method
print(Math.description())  # Output: This is a Math class.

math_instance = Math()
print(math_instance.pi)  # Output: 3.14159


Q3. User defined decorator example 
ðŸ§©A3.
def simple_decorator(func):
    def wrapper():
        print("Before func call")
        func()
        print("After func call")  
    return wrapper

@simple_decorator
def say_hello():
    print("Hello world")
    
say_hello()

Q4. Namespace in python :A namespace is a declarative region that provides a scope to the identifiers (the names of types, functions, variables, etc) inside it
ðŸ§©A4.
Types:
1. Built-in     2.Local     3.Global
1. This namespace contains all the built-in functions and exceptions in Python, like print(), len(), etc. It is available throughout the program.
print(len("Hello, World!"))

2. Local & Global
x = 10 #Global
def print_local():
    y = 20  #Local variable
    print(y)
    print(x) #Globally accessible
print_local()  #Output: 20
print(y)  #Local variable not accessible here

Q5. Comprehension: Comprehensions in Python provide us with a short and concise way to construct new sequences(List, Dictionary and Set)
ðŸ§©A5.
myList = [1,2,3,4,5,6]

#Comprehension list containing even numbers
evenList = [x for x in myList if x%2==0]
print(evenList)

nwList = []
for x in myList:
    if(x % 2 == 0 ):
        nwList.append(x)

print(nwList)

#Comprehension list containing even numbers as keys and square of even numbers as  values 
outDict = {}
for x in myList:
    if x % 2 ==0 :
        outDict[x] = x**2
        
print(outDict)

Q6. *args & **kwargs
ðŸ§©A6.
*args : It is a special syntax used in a function defination to pass a variable-length arguments
        * : variable-length        args : name by convention
        
def multiplyNum(a,b,*args):
    mul = a*b
    for num in args:
        mul *= num
    return mul
print(multiplyNum(1,2,3,4,5))
        
**kwargs : same def just in form of keyworded arguments in the form of key value pairs

def show_info(*args, **kwargs):
    print("args:", args)
    print("Kwrgs:", kwargs)


show_info("Alice", "Bob", age=25, location="New York")

Q7. Shallow vs Deep copy
ðŸ§©A7.
    Shallow copy : 1.Shallow copy creates a new object and 
                   2.Copies reference to inner object means changes to new object(inner object) will also change original object
    Deep copy: 1.Creates new object and copies all inner objects 
               2.Means a change in inner object will not affect outer one

import copy
original = [1, 2, [3,4]]

deep = copy.deepcopy(original)
#shallow = copy.copy(original)

original[2][0] = 99

print("Original:", original)  # [1, 2, [3,4]]
print("Deep copy:", deep)      ##[1, 2, [99,4]]
#print("Shallow copy:", shallow) #when shallow executed the value of shallow = original


                      
                       


